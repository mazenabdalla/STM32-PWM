
PWM_Stuff_L432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003988  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b5c  08003b5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b5c  08003b5c  00013b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b64  08003b64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b68  08003b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08003b78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003b78  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010383  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ebd  00000000  00000000  000303bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00032280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00033108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020225  00000000  00000000  00033ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001002b  00000000  00000000  000540fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7667  00000000  00000000  00064128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b78f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d24  00000000  00000000  0012b7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003afc 	.word	0x08003afc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003afc 	.word	0x08003afc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fac2 	bl	8000a5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f82f 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f919 	bl	8000714 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 f8e7 	bl	80006b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004e6:	f000 f88b 	bl	8000600 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004ea:	2104      	movs	r1, #4
 80004ec:	4812      	ldr	r0, [pc, #72]	; (8000538 <main+0x68>)
 80004ee:	f001 ffdf 	bl	80024b0 <HAL_TIM_PWM_Start>
  uint16_t counter = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	80fb      	strh	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

		counter = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	80fb      	strh	r3, [r7, #6]
		while (counter < 1000) {
 80004fa:	e009      	b.n	8000510 <main+0x40>
			//htim2.Instance->CCR2 = counter;
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, counter);
 80004fc:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <main+0x68>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	88fa      	ldrh	r2, [r7, #6]
 8000502:	639a      	str	r2, [r3, #56]	; 0x38
			counter++;
 8000504:	88fb      	ldrh	r3, [r7, #6]
 8000506:	3301      	adds	r3, #1
 8000508:	80fb      	strh	r3, [r7, #6]
			HAL_Delay(1);
 800050a:	2001      	movs	r0, #1
 800050c:	f000 fb1c 	bl	8000b48 <HAL_Delay>
		while (counter < 1000) {
 8000510:	88fb      	ldrh	r3, [r7, #6]
 8000512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000516:	d3f1      	bcc.n	80004fc <main+0x2c>
		}
		counter = counter + 0;
		while (counter > 0) {
 8000518:	e009      	b.n	800052e <main+0x5e>
			//htim2.Instance->CCR2 = counter;
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, counter);
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <main+0x68>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	88fa      	ldrh	r2, [r7, #6]
 8000520:	639a      	str	r2, [r3, #56]	; 0x38
			counter--;
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	3b01      	subs	r3, #1
 8000526:	80fb      	strh	r3, [r7, #6]
			HAL_Delay(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f000 fb0d 	bl	8000b48 <HAL_Delay>
		while (counter > 0) {
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d1f2      	bne.n	800051a <main+0x4a>
		counter = 0;
 8000534:	e7df      	b.n	80004f6 <main+0x26>
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b096      	sub	sp, #88	; 0x58
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2244      	movs	r2, #68	; 0x44
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 face 	bl	8003aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000562:	f000 fdc7 	bl	80010f4 <HAL_PWREx_ControlVoltageScaling>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800056c:	f000 f91c 	bl	80007a8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000570:	f000 fda2 	bl	80010b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000574:	4b21      	ldr	r3, [pc, #132]	; (80005fc <SystemClock_Config+0xc0>)
 8000576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800057a:	4a20      	ldr	r2, [pc, #128]	; (80005fc <SystemClock_Config+0xc0>)
 800057c:	f023 0318 	bic.w	r3, r3, #24
 8000580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000584:	2314      	movs	r3, #20
 8000586:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000594:	2360      	movs	r3, #96	; 0x60
 8000596:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800059c:	2301      	movs	r3, #1
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a0:	2301      	movs	r3, #1
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005a4:	2328      	movs	r3, #40	; 0x28
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005a8:	2307      	movs	r3, #7
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fdf1 	bl	80011a0 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005c4:	f000 f8f0 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2303      	movs	r3, #3
 80005ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	2104      	movs	r1, #4
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 f9f1 	bl	80019c8 <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005ec:	f000 f8dc 	bl	80007a8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005f0:	f001 fe04 	bl	80021fc <HAL_RCCEx_EnableMSIPLLMode>
}
 80005f4:	bf00      	nop
 80005f6:	3758      	adds	r7, #88	; 0x58
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000

08000600 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
 8000620:	615a      	str	r2, [r3, #20]
 8000622:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <MX_TIM2_Init+0xb0>)
 8000626:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800062a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_TIM2_Init+0xb0>)
 800062e:	f240 623f 	movw	r2, #1599	; 0x63f
 8000632:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <MX_TIM2_Init+0xb0>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_TIM2_Init+0xb0>)
 800063c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000640:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_TIM2_Init+0xb0>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_TIM2_Init+0xb0>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800064e:	4818      	ldr	r0, [pc, #96]	; (80006b0 <MX_TIM2_Init+0xb0>)
 8000650:	f001 fed6 	bl	8002400 <HAL_TIM_PWM_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800065a:	f000 f8a5 	bl	80007a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	4810      	ldr	r0, [pc, #64]	; (80006b0 <MX_TIM2_Init+0xb0>)
 800066e:	f002 fd6b 	bl	8003148 <HAL_TIMEx_MasterConfigSynchronization>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000678:	f000 f896 	bl	80007a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800067c:	2360      	movs	r3, #96	; 0x60
 800067e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	2204      	movs	r2, #4
 8000690:	4619      	mov	r1, r3
 8000692:	4807      	ldr	r0, [pc, #28]	; (80006b0 <MX_TIM2_Init+0xb0>)
 8000694:	f002 f90a 	bl	80028ac <HAL_TIM_PWM_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800069e:	f000 f883 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006a2:	4803      	ldr	r0, [pc, #12]	; (80006b0 <MX_TIM2_Init+0xb0>)
 80006a4:	f000 f8ce 	bl	8000844 <HAL_TIM_MspPostInit>

}
 80006a8:	bf00      	nop
 80006aa:	3728      	adds	r7, #40	; 0x28
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000028 	.word	0x20000028

080006b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ba:	4a15      	ldr	r2, [pc, #84]	; (8000710 <MX_USART2_UART_Init+0x5c>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006f8:	f002 fdaa 	bl	8003250 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000702:	f000 f851 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000074 	.word	0x20000074
 8000710:	40004400 	.word	0x40004400

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_GPIO_Init+0x8c>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_GPIO_Init+0x8c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2108      	movs	r1, #8
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <MX_GPIO_Init+0x90>)
 8000778:	f000 fc86 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800077c:	2308      	movs	r3, #8
 800077e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0x90>)
 8000794:	f000 fb0e 	bl	8000db4 <HAL_GPIO_Init>

}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000400 	.word	0x48000400

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_MspInit+0x44>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <HAL_MspInit+0x44>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6613      	str	r3, [r2, #96]	; 0x60
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_MspInit+0x44>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_MspInit+0x44>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <HAL_MspInit+0x44>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	6593      	str	r3, [r2, #88]	; 0x58
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_MspInit+0x44>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800080c:	d113      	bne.n	8000836 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <HAL_TIM_PWM_MspInit+0x44>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <HAL_TIM_PWM_MspInit+0x44>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6593      	str	r3, [r2, #88]	; 0x58
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_TIM_PWM_MspInit+0x44>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	201c      	movs	r0, #28
 800082c:	f000 fa8b 	bl	8000d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000830:	201c      	movs	r0, #28
 8000832:	f000 faa4 	bl	8000d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000864:	d11c      	bne.n	80008a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <HAL_TIM_MspPostInit+0x64>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <HAL_TIM_MspPostInit+0x64>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <HAL_TIM_MspPostInit+0x64>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800087e:	2302      	movs	r3, #2
 8000880:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f000 fa8a 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09e      	sub	sp, #120	; 0x78
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	2254      	movs	r2, #84	; 0x54
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 f90d 	bl	8003aec <memset>
  if(huart->Instance==USART2)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a28      	ldr	r2, [pc, #160]	; (8000978 <HAL_UART_MspInit+0xcc>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d148      	bne.n	800096e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008dc:	2302      	movs	r3, #2
 80008de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fa91 	bl	8001e10 <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008f4:	f7ff ff58 	bl	80007a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f8:	4b20      	ldr	r3, [pc, #128]	; (800097c <HAL_UART_MspInit+0xd0>)
 80008fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fc:	4a1f      	ldr	r2, [pc, #124]	; (800097c <HAL_UART_MspInit+0xd0>)
 80008fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000902:	6593      	str	r3, [r2, #88]	; 0x58
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <HAL_UART_MspInit+0xd0>)
 8000906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <HAL_UART_MspInit+0xd0>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000914:	4a19      	ldr	r2, [pc, #100]	; (800097c <HAL_UART_MspInit+0xd0>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_UART_MspInit+0xd0>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000928:	2304      	movs	r3, #4
 800092a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000938:	2307      	movs	r3, #7
 800093a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000940:	4619      	mov	r1, r3
 8000942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000946:	f000 fa35 	bl	8000db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800094a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800094e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800095c:	2303      	movs	r3, #3
 800095e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000964:	4619      	mov	r1, r3
 8000966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096a:	f000 fa23 	bl	8000db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3778      	adds	r7, #120	; 0x78
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40004400 	.word	0x40004400
 800097c:	40021000 	.word	0x40021000

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f000 f89c 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <TIM2_IRQHandler+0x10>)
 80009da:	f001 fe47 	bl	800266c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000028 	.word	0x20000028

080009e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a10:	f7ff ffea 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	; (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	; (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f003 f833 	bl	8003aa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3e:	f7ff fd47 	bl	80004d0 <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a50:	08003b6c 	.word	0x08003b6c
  ldr r2, =_sbss
 8000a54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a58:	200000fc 	.word	0x200000fc

08000a5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_IRQHandler>

08000a5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 f961 	bl	8000d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 f80e 	bl	8000a90 <HAL_InitTick>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d002      	beq.n	8000a80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	e001      	b.n	8000a84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a80:	f7ff fe98 	bl	80007b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a84:	79fb      	ldrb	r3, [r7, #7]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_InitTick+0x6c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d023      	beq.n	8000aec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_InitTick+0x70>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_InitTick+0x6c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 f96d 	bl	8000d9a <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d10f      	bne.n	8000ae6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d809      	bhi.n	8000ae0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f000 f937 	bl	8000d46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_InitTick+0x74>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
 8000ade:	e007      	b.n	8000af0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e004      	b.n	8000af0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	73fb      	strb	r3, [r7, #15]
 8000aea:	e001      	b.n	8000af0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000004 	.word	0x20000004

08000b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x20>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x24>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_IncTick+0x24>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	200000f8 	.word	0x200000f8

08000b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return uwTick;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_GetTick+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	200000f8 	.word	0x200000f8

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff ffee 	bl	8000b30 <HAL_GetTick>
 8000b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b60:	d005      	beq.n	8000b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_Delay+0x44>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b6e:	bf00      	nop
 8000b70:	f7ff ffde 	bl	8000b30 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d8f7      	bhi.n	8000b70 <HAL_Delay+0x28>
  {
  }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <__NVIC_EnableIRQ+0x38>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cfc:	d301      	bcc.n	8000d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00f      	b.n	8000d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <SysTick_Config+0x40>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f7ff ff8e 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <SysTick_Config+0x40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <SysTick_Config+0x40>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff29 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d58:	f7ff ff3e 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	6978      	ldr	r0, [r7, #20]
 8000d64:	f7ff ff8e 	bl	8000c84 <NVIC_EncodePriority>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff5d 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff31 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffa2 	bl	8000cec <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc2:	e148      	b.n	8001056 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 813a 	beq.w	8001050 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d005      	beq.n	8000df4 <HAL_GPIO_Init+0x40>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d130      	bne.n	8000e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	f003 0201 	and.w	r2, r3, #1
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d017      	beq.n	8000e92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d123      	bne.n	8000ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	6939      	ldr	r1, [r7, #16]
 8000ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0203 	and.w	r2, r3, #3
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 8094 	beq.w	8001050 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f28:	4b52      	ldr	r3, [pc, #328]	; (8001074 <HAL_GPIO_Init+0x2c0>)
 8000f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2c:	4a51      	ldr	r2, [pc, #324]	; (8001074 <HAL_GPIO_Init+0x2c0>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6613      	str	r3, [r2, #96]	; 0x60
 8000f34:	4b4f      	ldr	r3, [pc, #316]	; (8001074 <HAL_GPIO_Init+0x2c0>)
 8000f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f40:	4a4d      	ldr	r2, [pc, #308]	; (8001078 <HAL_GPIO_Init+0x2c4>)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	3302      	adds	r3, #2
 8000f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	220f      	movs	r2, #15
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f6a:	d00d      	beq.n	8000f88 <HAL_GPIO_Init+0x1d4>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a43      	ldr	r2, [pc, #268]	; (800107c <HAL_GPIO_Init+0x2c8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d007      	beq.n	8000f84 <HAL_GPIO_Init+0x1d0>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a42      	ldr	r2, [pc, #264]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d101      	bne.n	8000f80 <HAL_GPIO_Init+0x1cc>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e004      	b.n	8000f8a <HAL_GPIO_Init+0x1d6>
 8000f80:	2307      	movs	r3, #7
 8000f82:	e002      	b.n	8000f8a <HAL_GPIO_Init+0x1d6>
 8000f84:	2301      	movs	r3, #1
 8000f86:	e000      	b.n	8000f8a <HAL_GPIO_Init+0x1d6>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	f002 0203 	and.w	r2, r2, #3
 8000f90:	0092      	lsls	r2, r2, #2
 8000f92:	4093      	lsls	r3, r2
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f9a:	4937      	ldr	r1, [pc, #220]	; (8001078 <HAL_GPIO_Init+0x2c4>)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fa8:	4b36      	ldr	r3, [pc, #216]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fcc:	4a2d      	ldr	r2, [pc, #180]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ff6:	4a23      	ldr	r2, [pc, #140]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001020:	4a18      	ldr	r2, [pc, #96]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800104a:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	f47f aeaf 	bne.w	8000dc4 <HAL_GPIO_Init+0x10>
  }
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	371c      	adds	r7, #28
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	48000400 	.word	0x48000400
 8001080:	48000800 	.word	0x48000800
 8001084:	40010400 	.word	0x40010400

08001088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
 8001094:	4613      	mov	r3, r2
 8001096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001098:	787b      	ldrb	r3, [r7, #1]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40007000 	.word	0x40007000

080010d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40007000 	.word	0x40007000

080010f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001102:	d130      	bne.n	8001166 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800110c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001110:	d038      	beq.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800111a:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001120:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2232      	movs	r2, #50	; 0x32
 8001128:	fb02 f303 	mul.w	r3, r2, r3
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9b      	lsrs	r3, r3, #18
 8001134:	3301      	adds	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001138:	e002      	b.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3b01      	subs	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114c:	d102      	bne.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x60>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f2      	bne.n	800113a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001160:	d110      	bne.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e00f      	b.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800116e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001172:	d007      	beq.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800117c:	4a05      	ldr	r2, [pc, #20]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001182:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40007000 	.word	0x40007000
 8001198:	20000000 	.word	0x20000000
 800119c:	431bde83 	.word	0x431bde83

080011a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	f000 bc02 	b.w	80019b8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011b4:	4b96      	ldr	r3, [pc, #600]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011be:	4b94      	ldr	r3, [pc, #592]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80e4 	beq.w	800139e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <HAL_RCC_OscConfig+0x4c>
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2b0c      	cmp	r3, #12
 80011e0:	f040 808b 	bne.w	80012fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	f040 8087 	bne.w	80012fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011ec:	4b88      	ldr	r3, [pc, #544]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d005      	beq.n	8001204 <HAL_RCC_OscConfig+0x64>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e3d9      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1a      	ldr	r2, [r3, #32]
 8001208:	4b81      	ldr	r3, [pc, #516]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	2b00      	cmp	r3, #0
 8001212:	d004      	beq.n	800121e <HAL_RCC_OscConfig+0x7e>
 8001214:	4b7e      	ldr	r3, [pc, #504]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800121c:	e005      	b.n	800122a <HAL_RCC_OscConfig+0x8a>
 800121e:	4b7c      	ldr	r3, [pc, #496]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800122a:	4293      	cmp	r3, r2
 800122c:	d223      	bcs.n	8001276 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fd8c 	bl	8001d50 <RCC_SetFlashLatencyFromMSIRange>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e3ba      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001242:	4b73      	ldr	r3, [pc, #460]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a72      	ldr	r2, [pc, #456]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b70      	ldr	r3, [pc, #448]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	496d      	ldr	r1, [pc, #436]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001260:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	4968      	ldr	r1, [pc, #416]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001270:	4313      	orrs	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
 8001274:	e025      	b.n	80012c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001276:	4b66      	ldr	r3, [pc, #408]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a65      	ldr	r2, [pc, #404]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b63      	ldr	r3, [pc, #396]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4960      	ldr	r1, [pc, #384]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001290:	4313      	orrs	r3, r2
 8001292:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001294:	4b5e      	ldr	r3, [pc, #376]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	495b      	ldr	r1, [pc, #364]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d109      	bne.n	80012c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fd4c 	bl	8001d50 <RCC_SetFlashLatencyFromMSIRange>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e37a      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012c2:	f000 fc81 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 80012c6:	4602      	mov	r2, r0
 80012c8:	4b51      	ldr	r3, [pc, #324]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	4950      	ldr	r1, [pc, #320]	; (8001414 <HAL_RCC_OscConfig+0x274>)
 80012d4:	5ccb      	ldrb	r3, [r1, r3]
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	fa22 f303 	lsr.w	r3, r2, r3
 80012de:	4a4e      	ldr	r2, [pc, #312]	; (8001418 <HAL_RCC_OscConfig+0x278>)
 80012e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012e2:	4b4e      	ldr	r3, [pc, #312]	; (800141c <HAL_RCC_OscConfig+0x27c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fbd2 	bl	8000a90 <HAL_InitTick>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d052      	beq.n	800139c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	e35e      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d032      	beq.n	8001368 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001302:	4b43      	ldr	r3, [pc, #268]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a42      	ldr	r2, [pc, #264]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800130e:	f7ff fc0f 	bl	8000b30 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001316:	f7ff fc0b 	bl	8000b30 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e347      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a35      	ldr	r2, [pc, #212]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	4930      	ldr	r1, [pc, #192]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	492b      	ldr	r1, [pc, #172]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
 8001366:	e01a      	b.n	800139e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a28      	ldr	r2, [pc, #160]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001374:	f7ff fbdc 	bl	8000b30 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137c:	f7ff fbd8 	bl	8000b30 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e314      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x1dc>
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800139c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d073      	beq.n	8001492 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_OscConfig+0x21c>
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	d10e      	bne.n	80013d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d10b      	bne.n	80013d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d063      	beq.n	8001490 <HAL_RCC_OscConfig+0x2f0>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d15f      	bne.n	8001490 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e2f1      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013dc:	d106      	bne.n	80013ec <HAL_RCC_OscConfig+0x24c>
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80013e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e025      	b.n	8001438 <HAL_RCC_OscConfig+0x298>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f4:	d114      	bne.n	8001420 <HAL_RCC_OscConfig+0x280>
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a02      	ldr	r2, [pc, #8]	; (8001410 <HAL_RCC_OscConfig+0x270>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e013      	b.n	8001438 <HAL_RCC_OscConfig+0x298>
 8001410:	40021000 	.word	0x40021000
 8001414:	08003b14 	.word	0x08003b14
 8001418:	20000000 	.word	0x20000000
 800141c:	20000004 	.word	0x20000004
 8001420:	4ba0      	ldr	r3, [pc, #640]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a9f      	ldr	r2, [pc, #636]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b9d      	ldr	r3, [pc, #628]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a9c      	ldr	r2, [pc, #624]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fb76 	bl	8000b30 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fb72 	bl	8000b30 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e2ae      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800145a:	4b92      	ldr	r3, [pc, #584]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x2a8>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fb62 	bl	8000b30 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fb5e 	bl	8000b30 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e29a      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001482:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x2d0>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d060      	beq.n	8001560 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_OscConfig+0x310>
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2b0c      	cmp	r3, #12
 80014a8:	d119      	bne.n	80014de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d116      	bne.n	80014de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b0:	4b7c      	ldr	r3, [pc, #496]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_OscConfig+0x328>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e277      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c8:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	061b      	lsls	r3, r3, #24
 80014d6:	4973      	ldr	r1, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014dc:	e040      	b.n	8001560 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d023      	beq.n	800152e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e6:	4b6f      	ldr	r3, [pc, #444]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a6e      	ldr	r2, [pc, #440]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff fb1d 	bl	8000b30 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fb19 	bl	8000b30 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e255      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800150c:	4b65      	ldr	r3, [pc, #404]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b62      	ldr	r3, [pc, #392]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	061b      	lsls	r3, r3, #24
 8001526:	495f      	ldr	r1, [pc, #380]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
 800152c:	e018      	b.n	8001560 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152e:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a5c      	ldr	r2, [pc, #368]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff faf9 	bl	8000b30 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff faf5 	bl	8000b30 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e231      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001554:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d03c      	beq.n	80015e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d01c      	beq.n	80015ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001574:	4b4b      	ldr	r3, [pc, #300]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157a:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001584:	f7ff fad4 	bl	8000b30 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fad0 	bl	8000b30 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e20c      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ef      	beq.n	800158c <HAL_RCC_OscConfig+0x3ec>
 80015ac:	e01b      	b.n	80015e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ae:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b4:	4a3b      	ldr	r2, [pc, #236]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff fab7 	bl	8000b30 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fab3 	bl	8000b30 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e1ef      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1ef      	bne.n	80015c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80a6 	beq.w	8001740 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015f8:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 80015fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10d      	bne.n	8001620 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	4a26      	ldr	r2, [pc, #152]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 800160a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160e:	6593      	str	r3, [r2, #88]	; 0x58
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161c:	2301      	movs	r3, #1
 800161e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <HAL_RCC_OscConfig+0x508>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d118      	bne.n	800165e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <HAL_RCC_OscConfig+0x508>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <HAL_RCC_OscConfig+0x508>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001636:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001638:	f7ff fa7a 	bl	8000b30 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001640:	f7ff fa76 	bl	8000b30 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e1b2      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_RCC_OscConfig+0x508>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d108      	bne.n	8001678 <HAL_RCC_OscConfig+0x4d8>
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001676:	e029      	b.n	80016cc <HAL_RCC_OscConfig+0x52c>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d115      	bne.n	80016ac <HAL_RCC_OscConfig+0x50c>
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001696:	4a03      	ldr	r2, [pc, #12]	; (80016a4 <HAL_RCC_OscConfig+0x504>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a0:	e014      	b.n	80016cc <HAL_RCC_OscConfig+0x52c>
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40007000 	.word	0x40007000
 80016ac:	4b9a      	ldr	r3, [pc, #616]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 80016ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b2:	4a99      	ldr	r2, [pc, #612]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016bc:	4b96      	ldr	r3, [pc, #600]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 80016be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c2:	4a95      	ldr	r2, [pc, #596]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 80016c4:	f023 0304 	bic.w	r3, r3, #4
 80016c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d016      	beq.n	8001702 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fa2c 	bl	8000b30 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016dc:	f7ff fa28 	bl	8000b30 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e162      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f2:	4b89      	ldr	r3, [pc, #548]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 80016f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ed      	beq.n	80016dc <HAL_RCC_OscConfig+0x53c>
 8001700:	e015      	b.n	800172e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff fa15 	bl	8000b30 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fa11 	bl	8000b30 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e14b      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001720:	4b7d      	ldr	r3, [pc, #500]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ed      	bne.n	800170a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800172e:	7ffb      	ldrb	r3, [r7, #31]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d105      	bne.n	8001740 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001734:	4b78      	ldr	r3, [pc, #480]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	4a77      	ldr	r2, [pc, #476]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 800173a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0320 	and.w	r3, r3, #32
 8001748:	2b00      	cmp	r3, #0
 800174a:	d03c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	2b00      	cmp	r3, #0
 8001752:	d01c      	beq.n	800178e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001754:	4b70      	ldr	r3, [pc, #448]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 8001756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800175a:	4a6f      	ldr	r2, [pc, #444]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001764:	f7ff f9e4 	bl	8000b30 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800176c:	f7ff f9e0 	bl	8000b30 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e11c      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800177e:	4b66      	ldr	r3, [pc, #408]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 8001780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ef      	beq.n	800176c <HAL_RCC_OscConfig+0x5cc>
 800178c:	e01b      	b.n	80017c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800178e:	4b62      	ldr	r3, [pc, #392]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 8001790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001794:	4a60      	ldr	r2, [pc, #384]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179e:	f7ff f9c7 	bl	8000b30 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017a6:	f7ff f9c3 	bl	8000b30 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e0ff      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017b8:	4b57      	ldr	r3, [pc, #348]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 80017ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1ef      	bne.n	80017a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 80f3 	beq.w	80019b6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	f040 80c9 	bne.w	800196c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017da:	4b4f      	ldr	r3, [pc, #316]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f003 0203 	and.w	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d12c      	bne.n	8001848 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	3b01      	subs	r3, #1
 80017fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d123      	bne.n	8001848 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800180c:	429a      	cmp	r2, r3
 800180e:	d11b      	bne.n	8001848 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d113      	bne.n	8001848 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182a:	085b      	lsrs	r3, r3, #1
 800182c:	3b01      	subs	r3, #1
 800182e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d109      	bne.n	8001848 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	085b      	lsrs	r3, r3, #1
 8001840:	3b01      	subs	r3, #1
 8001842:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d06b      	beq.n	8001920 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d062      	beq.n	8001914 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800184e:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0ac      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a2d      	ldr	r2, [pc, #180]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 8001864:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001868:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800186a:	f7ff f961 	bl	8000b30 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff f95d 	bl	8000b30 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e099      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001890:	4b21      	ldr	r3, [pc, #132]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_RCC_OscConfig+0x77c>)
 8001896:	4013      	ands	r3, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018a0:	3a01      	subs	r2, #1
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	4311      	orrs	r1, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018aa:	0212      	lsls	r2, r2, #8
 80018ac:	4311      	orrs	r1, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018b2:	0852      	lsrs	r2, r2, #1
 80018b4:	3a01      	subs	r2, #1
 80018b6:	0552      	lsls	r2, r2, #21
 80018b8:	4311      	orrs	r1, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018be:	0852      	lsrs	r2, r2, #1
 80018c0:	3a01      	subs	r2, #1
 80018c2:	0652      	lsls	r2, r2, #25
 80018c4:	4311      	orrs	r1, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ca:	06d2      	lsls	r2, r2, #27
 80018cc:	430a      	orrs	r2, r1
 80018ce:	4912      	ldr	r1, [pc, #72]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 80018da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 80018e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018ec:	f7ff f920 	bl	8000b30 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f91c 	bl	8000b30 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e058      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <HAL_RCC_OscConfig+0x778>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001912:	e050      	b.n	80019b6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e04f      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
 8001918:	40021000 	.word	0x40021000
 800191c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <HAL_RCC_OscConfig+0x820>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d144      	bne.n	80019b6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_RCC_OscConfig+0x820>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <HAL_RCC_OscConfig+0x820>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001936:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001938:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_RCC_OscConfig+0x820>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4a20      	ldr	r2, [pc, #128]	; (80019c0 <HAL_RCC_OscConfig+0x820>)
 800193e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001942:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001944:	f7ff f8f4 	bl	8000b30 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff f8f0 	bl	8000b30 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e02c      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195e:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_RCC_OscConfig+0x820>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x7ac>
 800196a:	e024      	b.n	80019b6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2b0c      	cmp	r3, #12
 8001970:	d01f      	beq.n	80019b2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_RCC_OscConfig+0x820>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <HAL_RCC_OscConfig+0x820>)
 8001978:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800197c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197e:	f7ff f8d7 	bl	8000b30 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001986:	f7ff f8d3 	bl	8000b30 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e00f      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_RCC_OscConfig+0x820>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_RCC_OscConfig+0x820>)
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	4905      	ldr	r1, [pc, #20]	; (80019c0 <HAL_RCC_OscConfig+0x820>)
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_RCC_OscConfig+0x824>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
 80019b0:	e001      	b.n	80019b6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	feeefffc 	.word	0xfeeefffc

080019c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0e7      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b75      	ldr	r3, [pc, #468]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d910      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b72      	ldr	r3, [pc, #456]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 0207 	bic.w	r2, r3, #7
 80019f2:	4970      	ldr	r1, [pc, #448]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0cf      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d010      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d908      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4960      	ldr	r1, [pc, #384]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d04c      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4e:	4b5a      	ldr	r3, [pc, #360]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d121      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0a6      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a66:	4b54      	ldr	r3, [pc, #336]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d115      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e09a      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a7e:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e08e      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8e:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e086      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a9e:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f023 0203 	bic.w	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4943      	ldr	r1, [pc, #268]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ab0:	f7ff f83e 	bl	8000b30 <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab8:	f7ff f83a 	bl	8000b30 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e06e      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 020c 	and.w	r2, r3, #12
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d1eb      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d010      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4b31      	ldr	r3, [pc, #196]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d208      	bcs.n	8001b0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	492b      	ldr	r1, [pc, #172]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b0e:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d210      	bcs.n	8001b3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1c:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 0207 	bic.w	r2, r3, #7
 8001b24:	4923      	ldr	r1, [pc, #140]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e036      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d008      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	4918      	ldr	r1, [pc, #96]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d009      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4910      	ldr	r1, [pc, #64]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b7c:	f000 f824 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	490b      	ldr	r1, [pc, #44]	; (8001bbc <HAL_RCC_ClockConfig+0x1f4>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
 8001b98:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_ClockConfig+0x1fc>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe ff75 	bl	8000a90 <HAL_InitTick>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001baa:	7afb      	ldrb	r3, [r7, #11]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40022000 	.word	0x40022000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08003b14 	.word	0x08003b14
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000004 	.word	0x20000004

08001bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd6:	4b3e      	ldr	r3, [pc, #248]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x34>
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d121      	bne.n	8001c3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d11e      	bne.n	8001c3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bfc:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d107      	bne.n	8001c18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c08:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	e005      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c24:	4a2b      	ldr	r2, [pc, #172]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10d      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c38:	e00a      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d102      	bne.n	8001c46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c40:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	e004      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c4c:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d134      	bne.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c56:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d003      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0xac>
 8001c6c:	e005      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c70:	617b      	str	r3, [r7, #20]
      break;
 8001c72:	e005      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c74:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c76:	617b      	str	r3, [r7, #20]
      break;
 8001c78:	e002      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	617b      	str	r3, [r7, #20]
      break;
 8001c7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	fb03 f202 	mul.w	r2, r3, r2
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	0e5b      	lsrs	r3, r3, #25
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cc0:	69bb      	ldr	r3, [r7, #24]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08003b2c 	.word	0x08003b2c
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	007a1200 	.word	0x007a1200

08001ce0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000000 	.word	0x20000000

08001cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cfc:	f7ff fff0 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4904      	ldr	r1, [pc, #16]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	08003b24 	.word	0x08003b24

08001d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d28:	f7ff ffda 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0adb      	lsrs	r3, r3, #11
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4904      	ldr	r1, [pc, #16]	; (8001d4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08003b24 	.word	0x08003b24

08001d50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d68:	f7ff f9b6 	bl	80010d8 <HAL_PWREx_GetVoltageRange>
 8001d6c:	6178      	str	r0, [r7, #20]
 8001d6e:	e014      	b.n	8001d9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d70:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	4a24      	ldr	r2, [pc, #144]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d88:	f7ff f9a6 	bl	80010d8 <HAL_PWREx_GetVoltageRange>
 8001d8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da0:	d10b      	bne.n	8001dba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b80      	cmp	r3, #128	; 0x80
 8001da6:	d919      	bls.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2ba0      	cmp	r3, #160	; 0xa0
 8001dac:	d902      	bls.n	8001db4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dae:	2302      	movs	r3, #2
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	e013      	b.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001db4:	2301      	movs	r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	e010      	b.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b80      	cmp	r3, #128	; 0x80
 8001dbe:	d902      	bls.n	8001dc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	e00a      	b.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b80      	cmp	r3, #128	; 0x80
 8001dca:	d102      	bne.n	8001dd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dcc:	2302      	movs	r3, #2
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e004      	b.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b70      	cmp	r3, #112	; 0x70
 8001dd6:	d101      	bne.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd8:	2301      	movs	r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 0207 	bic.w	r2, r3, #7
 8001de4:	4909      	ldr	r1, [pc, #36]	; (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d001      	beq.n	8001dfe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40022000 	.word	0x40022000

08001e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e18:	2300      	movs	r3, #0
 8001e1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d031      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e34:	d01a      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001e36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e3a:	d814      	bhi.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e44:	d10f      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	4a5c      	ldr	r2, [pc, #368]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e52:	e00c      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3304      	adds	r3, #4
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f9de 	bl	800221c <RCCEx_PLLSAI1_Config>
 8001e60:	4603      	mov	r3, r0
 8001e62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e64:	e003      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	74fb      	strb	r3, [r7, #19]
      break;
 8001e6a:	e000      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e6e:	7cfb      	ldrb	r3, [r7, #19]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10b      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e74:	4b51      	ldr	r3, [pc, #324]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e82:	494e      	ldr	r1, [pc, #312]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e8a:	e001      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e8c:	7cfb      	ldrb	r3, [r7, #19]
 8001e8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 809e 	beq.w	8001fda <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ea2:	4b46      	ldr	r3, [pc, #280]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00d      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb8:	4b40      	ldr	r3, [pc, #256]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	4a3f      	ldr	r2, [pc, #252]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec4:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ed4:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a39      	ldr	r2, [pc, #228]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ede:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ee0:	f7fe fe26 	bl	8000b30 <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ee6:	e009      	b.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee8:	f7fe fe22 	bl	8000b30 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d902      	bls.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	74fb      	strb	r3, [r7, #19]
        break;
 8001efa:	e005      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001efc:	4b30      	ldr	r3, [pc, #192]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0ef      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001f08:	7cfb      	ldrb	r3, [r7, #19]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d15a      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01e      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d019      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f34:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f46:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4c:	4a1b      	ldr	r2, [pc, #108]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f56:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d016      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7fe fde2 	bl	8000b30 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7fe fdde 	bl	8000b30 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d902      	bls.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	74fb      	strb	r3, [r7, #19]
            break;
 8001f86:	e006      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0ec      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001f96:	7cfb      	ldrb	r3, [r7, #19]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001faa:	4904      	ldr	r1, [pc, #16]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fb2:	e009      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fb4:	7cfb      	ldrb	r3, [r7, #19]
 8001fb6:	74bb      	strb	r3, [r7, #18]
 8001fb8:	e006      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc4:	7cfb      	ldrb	r3, [r7, #19]
 8001fc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc8:	7c7b      	ldrb	r3, [r7, #17]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d105      	bne.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fce:	4b8a      	ldr	r3, [pc, #552]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	4a89      	ldr	r2, [pc, #548]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fe6:	4b84      	ldr	r3, [pc, #528]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fec:	f023 0203 	bic.w	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4980      	ldr	r1, [pc, #512]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00a      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002008:	4b7b      	ldr	r3, [pc, #492]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	f023 020c 	bic.w	r2, r3, #12
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	4978      	ldr	r1, [pc, #480]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002018:	4313      	orrs	r3, r2
 800201a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800202a:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800202c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002030:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	496f      	ldr	r1, [pc, #444]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00a      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800204c:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205a:	4967      	ldr	r1, [pc, #412]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800206e:	4b62      	ldr	r3, [pc, #392]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002074:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207c:	495e      	ldr	r1, [pc, #376]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002090:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	4956      	ldr	r1, [pc, #344]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020b2:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	494d      	ldr	r1, [pc, #308]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d028      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020d4:	4b48      	ldr	r3, [pc, #288]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4945      	ldr	r1, [pc, #276]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020f2:	d106      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020f4:	4b40      	ldr	r3, [pc, #256]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4a3f      	ldr	r2, [pc, #252]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020fe:	60d3      	str	r3, [r2, #12]
 8002100:	e011      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800210a:	d10c      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3304      	adds	r3, #4
 8002110:	2101      	movs	r1, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f882 	bl	800221c <RCCEx_PLLSAI1_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002122:	7cfb      	ldrb	r3, [r7, #19]
 8002124:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d028      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002132:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002138:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	492d      	ldr	r1, [pc, #180]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002150:	d106      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002152:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	4a28      	ldr	r2, [pc, #160]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800215c:	60d3      	str	r3, [r2, #12]
 800215e:	e011      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002168:	d10c      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3304      	adds	r3, #4
 800216e:	2101      	movs	r1, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f000 f853 	bl	800221c <RCCEx_PLLSAI1_Config>
 8002176:	4603      	mov	r3, r0
 8002178:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800217a:	7cfb      	ldrb	r3, [r7, #19]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01c      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219e:	4916      	ldr	r1, [pc, #88]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021ae:	d10c      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	2102      	movs	r1, #2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f830 	bl	800221c <RCCEx_PLLSAI1_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021dc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e4:	4904      	ldr	r1, [pc, #16]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000

080021fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002206:	f043 0304 	orr.w	r3, r3, #4
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000

0800221c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800222a:	4b74      	ldr	r3, [pc, #464]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d018      	beq.n	8002268 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002236:	4b71      	ldr	r3, [pc, #452]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f003 0203 	and.w	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d10d      	bne.n	8002262 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
       ||
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800224e:	4b6b      	ldr	r3, [pc, #428]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
       ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d047      	beq.n	80022f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e044      	b.n	80022f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d018      	beq.n	80022a2 <RCCEx_PLLSAI1_Config+0x86>
 8002270:	2b03      	cmp	r3, #3
 8002272:	d825      	bhi.n	80022c0 <RCCEx_PLLSAI1_Config+0xa4>
 8002274:	2b01      	cmp	r3, #1
 8002276:	d002      	beq.n	800227e <RCCEx_PLLSAI1_Config+0x62>
 8002278:	2b02      	cmp	r3, #2
 800227a:	d009      	beq.n	8002290 <RCCEx_PLLSAI1_Config+0x74>
 800227c:	e020      	b.n	80022c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800227e:	4b5f      	ldr	r3, [pc, #380]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11d      	bne.n	80022c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800228e:	e01a      	b.n	80022c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002290:	4b5a      	ldr	r3, [pc, #360]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002298:	2b00      	cmp	r3, #0
 800229a:	d116      	bne.n	80022ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a0:	e013      	b.n	80022ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022a2:	4b56      	ldr	r3, [pc, #344]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022ae:	4b53      	ldr	r3, [pc, #332]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022be:	e006      	b.n	80022ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
      break;
 80022c4:	e004      	b.n	80022d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022c6:	bf00      	nop
 80022c8:	e002      	b.n	80022d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ca:	bf00      	nop
 80022cc:	e000      	b.n	80022d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10d      	bne.n	80022f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022d6:	4b49      	ldr	r3, [pc, #292]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	430b      	orrs	r3, r1
 80022ec:	4943      	ldr	r1, [pc, #268]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d17c      	bne.n	80023f2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022f8:	4b40      	ldr	r3, [pc, #256]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a3f      	ldr	r2, [pc, #252]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002304:	f7fe fc14 	bl	8000b30 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800230a:	e009      	b.n	8002320 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800230c:	f7fe fc10 	bl	8000b30 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d902      	bls.n	8002320 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	73fb      	strb	r3, [r7, #15]
        break;
 800231e:	e005      	b.n	800232c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002320:	4b36      	ldr	r3, [pc, #216]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ef      	bne.n	800230c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d15f      	bne.n	80023f2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d110      	bne.n	800235a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002338:	4b30      	ldr	r3, [pc, #192]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002340:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6892      	ldr	r2, [r2, #8]
 8002348:	0211      	lsls	r1, r2, #8
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68d2      	ldr	r2, [r2, #12]
 800234e:	06d2      	lsls	r2, r2, #27
 8002350:	430a      	orrs	r2, r1
 8002352:	492a      	ldr	r1, [pc, #168]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002354:	4313      	orrs	r3, r2
 8002356:	610b      	str	r3, [r1, #16]
 8002358:	e027      	b.n	80023aa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d112      	bne.n	8002386 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002360:	4b26      	ldr	r3, [pc, #152]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002368:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6892      	ldr	r2, [r2, #8]
 8002370:	0211      	lsls	r1, r2, #8
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6912      	ldr	r2, [r2, #16]
 8002376:	0852      	lsrs	r2, r2, #1
 8002378:	3a01      	subs	r2, #1
 800237a:	0552      	lsls	r2, r2, #21
 800237c:	430a      	orrs	r2, r1
 800237e:	491f      	ldr	r1, [pc, #124]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002380:	4313      	orrs	r3, r2
 8002382:	610b      	str	r3, [r1, #16]
 8002384:	e011      	b.n	80023aa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800238e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6892      	ldr	r2, [r2, #8]
 8002396:	0211      	lsls	r1, r2, #8
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6952      	ldr	r2, [r2, #20]
 800239c:	0852      	lsrs	r2, r2, #1
 800239e:	3a01      	subs	r2, #1
 80023a0:	0652      	lsls	r2, r2, #25
 80023a2:	430a      	orrs	r2, r1
 80023a4:	4915      	ldr	r1, [pc, #84]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a13      	ldr	r2, [pc, #76]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b6:	f7fe fbbb 	bl	8000b30 <HAL_GetTick>
 80023ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023bc:	e009      	b.n	80023d2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023be:	f7fe fbb7 	bl	8000b30 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d902      	bls.n	80023d2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	73fb      	strb	r3, [r7, #15]
          break;
 80023d0:	e005      	b.n	80023de <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0ef      	beq.n	80023be <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	4903      	ldr	r1, [pc, #12]	; (80023fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e049      	b.n	80024a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe f9e8 	bl	80007fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3304      	adds	r3, #4
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f000 fb7a 	bl	8002b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d109      	bne.n	80024d4 <HAL_TIM_PWM_Start+0x24>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	bf14      	ite	ne
 80024cc:	2301      	movne	r3, #1
 80024ce:	2300      	moveq	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	e03c      	b.n	800254e <HAL_TIM_PWM_Start+0x9e>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d109      	bne.n	80024ee <HAL_TIM_PWM_Start+0x3e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	bf14      	ite	ne
 80024e6:	2301      	movne	r3, #1
 80024e8:	2300      	moveq	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	e02f      	b.n	800254e <HAL_TIM_PWM_Start+0x9e>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d109      	bne.n	8002508 <HAL_TIM_PWM_Start+0x58>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e022      	b.n	800254e <HAL_TIM_PWM_Start+0x9e>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d109      	bne.n	8002522 <HAL_TIM_PWM_Start+0x72>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b01      	cmp	r3, #1
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	e015      	b.n	800254e <HAL_TIM_PWM_Start+0x9e>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b10      	cmp	r3, #16
 8002526:	d109      	bne.n	800253c <HAL_TIM_PWM_Start+0x8c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	e008      	b.n	800254e <HAL_TIM_PWM_Start+0x9e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b01      	cmp	r3, #1
 8002546:	bf14      	ite	ne
 8002548:	2301      	movne	r3, #1
 800254a:	2300      	moveq	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e07e      	b.n	8002654 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d104      	bne.n	8002566 <HAL_TIM_PWM_Start+0xb6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002564:	e023      	b.n	80025ae <HAL_TIM_PWM_Start+0xfe>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b04      	cmp	r3, #4
 800256a:	d104      	bne.n	8002576 <HAL_TIM_PWM_Start+0xc6>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002574:	e01b      	b.n	80025ae <HAL_TIM_PWM_Start+0xfe>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d104      	bne.n	8002586 <HAL_TIM_PWM_Start+0xd6>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002584:	e013      	b.n	80025ae <HAL_TIM_PWM_Start+0xfe>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b0c      	cmp	r3, #12
 800258a:	d104      	bne.n	8002596 <HAL_TIM_PWM_Start+0xe6>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002594:	e00b      	b.n	80025ae <HAL_TIM_PWM_Start+0xfe>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b10      	cmp	r3, #16
 800259a:	d104      	bne.n	80025a6 <HAL_TIM_PWM_Start+0xf6>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025a4:	e003      	b.n	80025ae <HAL_TIM_PWM_Start+0xfe>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2202      	movs	r2, #2
 80025aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2201      	movs	r2, #1
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fda0 	bl	80030fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a26      	ldr	r2, [pc, #152]	; (800265c <HAL_TIM_PWM_Start+0x1ac>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d009      	beq.n	80025da <HAL_TIM_PWM_Start+0x12a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a25      	ldr	r2, [pc, #148]	; (8002660 <HAL_TIM_PWM_Start+0x1b0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d004      	beq.n	80025da <HAL_TIM_PWM_Start+0x12a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a23      	ldr	r2, [pc, #140]	; (8002664 <HAL_TIM_PWM_Start+0x1b4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d101      	bne.n	80025de <HAL_TIM_PWM_Start+0x12e>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_TIM_PWM_Start+0x130>
 80025de:	2300      	movs	r3, #0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d007      	beq.n	80025f4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a18      	ldr	r2, [pc, #96]	; (800265c <HAL_TIM_PWM_Start+0x1ac>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d009      	beq.n	8002612 <HAL_TIM_PWM_Start+0x162>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002606:	d004      	beq.n	8002612 <HAL_TIM_PWM_Start+0x162>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a14      	ldr	r2, [pc, #80]	; (8002660 <HAL_TIM_PWM_Start+0x1b0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d115      	bne.n	800263e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <HAL_TIM_PWM_Start+0x1b8>)
 800261a:	4013      	ands	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b06      	cmp	r3, #6
 8002622:	d015      	beq.n	8002650 <HAL_TIM_PWM_Start+0x1a0>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262a:	d011      	beq.n	8002650 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263c:	e008      	b.n	8002650 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e000      	b.n	8002652 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002650:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40014000 	.word	0x40014000
 8002664:	40014400 	.word	0x40014400
 8002668:	00010007 	.word	0x00010007

0800266c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d122      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d11b      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0202 	mvn.w	r2, #2
 8002698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fa24 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fa16 	bl	8002ae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fa27 	bl	8002b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d122      	bne.n	800271c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d11b      	bne.n	800271c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0204 	mvn.w	r2, #4
 80026ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2202      	movs	r2, #2
 80026f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f9fa 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
 8002708:	e005      	b.n	8002716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f9ec 	bl	8002ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f9fd 	bl	8002b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b08      	cmp	r3, #8
 8002728:	d122      	bne.n	8002770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b08      	cmp	r3, #8
 8002736:	d11b      	bne.n	8002770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0208 	mvn.w	r2, #8
 8002740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2204      	movs	r2, #4
 8002746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f9d0 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f9c2 	bl	8002ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f9d3 	bl	8002b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b10      	cmp	r3, #16
 800277c:	d122      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b10      	cmp	r3, #16
 800278a:	d11b      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0210 	mvn.w	r2, #16
 8002794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2208      	movs	r2, #8
 800279a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f9a6 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
 80027b0:	e005      	b.n	80027be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f998 	bl	8002ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f9a9 	bl	8002b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0201 	mvn.w	r2, #1
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f972 	bl	8002ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b80      	cmp	r3, #128	; 0x80
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d107      	bne.n	800281c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fd06 	bl	8003228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800282a:	d10e      	bne.n	800284a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002836:	2b80      	cmp	r3, #128	; 0x80
 8002838:	d107      	bne.n	800284a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fcf9 	bl	800323c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d10e      	bne.n	8002876 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d107      	bne.n	8002876 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800286e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f957 	bl	8002b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b20      	cmp	r3, #32
 8002882:	d10e      	bne.n	80028a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b20      	cmp	r3, #32
 8002890:	d107      	bne.n	80028a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f06f 0220 	mvn.w	r2, #32
 800289a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fcb9 	bl	8003214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e0ff      	b.n	8002aca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b14      	cmp	r3, #20
 80028d6:	f200 80f0 	bhi.w	8002aba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80028da:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e0:	08002935 	.word	0x08002935
 80028e4:	08002abb 	.word	0x08002abb
 80028e8:	08002abb 	.word	0x08002abb
 80028ec:	08002abb 	.word	0x08002abb
 80028f0:	08002975 	.word	0x08002975
 80028f4:	08002abb 	.word	0x08002abb
 80028f8:	08002abb 	.word	0x08002abb
 80028fc:	08002abb 	.word	0x08002abb
 8002900:	080029b7 	.word	0x080029b7
 8002904:	08002abb 	.word	0x08002abb
 8002908:	08002abb 	.word	0x08002abb
 800290c:	08002abb 	.word	0x08002abb
 8002910:	080029f7 	.word	0x080029f7
 8002914:	08002abb 	.word	0x08002abb
 8002918:	08002abb 	.word	0x08002abb
 800291c:	08002abb 	.word	0x08002abb
 8002920:	08002a39 	.word	0x08002a39
 8002924:	08002abb 	.word	0x08002abb
 8002928:	08002abb 	.word	0x08002abb
 800292c:	08002abb 	.word	0x08002abb
 8002930:	08002a79 	.word	0x08002a79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f960 	bl	8002c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0208 	orr.w	r2, r2, #8
 800294e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0204 	bic.w	r2, r2, #4
 800295e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6999      	ldr	r1, [r3, #24]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	619a      	str	r2, [r3, #24]
      break;
 8002972:	e0a5      	b.n	8002ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f9bc 	bl	8002cf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800298e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800299e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6999      	ldr	r1, [r3, #24]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	021a      	lsls	r2, r3, #8
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	619a      	str	r2, [r3, #24]
      break;
 80029b4:	e084      	b.n	8002ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fa15 	bl	8002dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0208 	orr.w	r2, r2, #8
 80029d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69da      	ldr	r2, [r3, #28]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0204 	bic.w	r2, r2, #4
 80029e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69d9      	ldr	r1, [r3, #28]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	61da      	str	r2, [r3, #28]
      break;
 80029f4:	e064      	b.n	8002ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fa6d 	bl	8002edc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69da      	ldr	r2, [r3, #28]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69d9      	ldr	r1, [r3, #28]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	021a      	lsls	r2, r3, #8
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	61da      	str	r2, [r3, #28]
      break;
 8002a36:	e043      	b.n	8002ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 faaa 	bl	8002f98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0208 	orr.w	r2, r2, #8
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0204 	bic.w	r2, r2, #4
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a76:	e023      	b.n	8002ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fae2 	bl	8003048 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	021a      	lsls	r2, r3, #8
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ab8:	e002      	b.n	8002ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	75fb      	strb	r3, [r7, #23]
      break;
 8002abe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop

08002ad4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a2a      	ldr	r2, [pc, #168]	; (8002bf4 <TIM_Base_SetConfig+0xbc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <TIM_Base_SetConfig+0x20>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b56:	d108      	bne.n	8002b6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a21      	ldr	r2, [pc, #132]	; (8002bf4 <TIM_Base_SetConfig+0xbc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00b      	beq.n	8002b8a <TIM_Base_SetConfig+0x52>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b78:	d007      	beq.n	8002b8a <TIM_Base_SetConfig+0x52>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a1e      	ldr	r2, [pc, #120]	; (8002bf8 <TIM_Base_SetConfig+0xc0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d003      	beq.n	8002b8a <TIM_Base_SetConfig+0x52>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <TIM_Base_SetConfig+0xc4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d108      	bne.n	8002b9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a0c      	ldr	r2, [pc, #48]	; (8002bf4 <TIM_Base_SetConfig+0xbc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d007      	beq.n	8002bd8 <TIM_Base_SetConfig+0xa0>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a0b      	ldr	r2, [pc, #44]	; (8002bf8 <TIM_Base_SetConfig+0xc0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d003      	beq.n	8002bd8 <TIM_Base_SetConfig+0xa0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <TIM_Base_SetConfig+0xc4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d103      	bne.n	8002be0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	615a      	str	r2, [r3, #20]
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40014000 	.word	0x40014000
 8002bfc:	40014400 	.word	0x40014400

08002c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	f023 0201 	bic.w	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0303 	bic.w	r3, r3, #3
 8002c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f023 0302 	bic.w	r3, r3, #2
 8002c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a24      	ldr	r2, [pc, #144]	; (8002cec <TIM_OC1_SetConfig+0xec>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d007      	beq.n	8002c70 <TIM_OC1_SetConfig+0x70>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a23      	ldr	r2, [pc, #140]	; (8002cf0 <TIM_OC1_SetConfig+0xf0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d003      	beq.n	8002c70 <TIM_OC1_SetConfig+0x70>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a22      	ldr	r2, [pc, #136]	; (8002cf4 <TIM_OC1_SetConfig+0xf4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d10c      	bne.n	8002c8a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f023 0308 	bic.w	r3, r3, #8
 8002c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f023 0304 	bic.w	r3, r3, #4
 8002c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a17      	ldr	r2, [pc, #92]	; (8002cec <TIM_OC1_SetConfig+0xec>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d007      	beq.n	8002ca2 <TIM_OC1_SetConfig+0xa2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a16      	ldr	r2, [pc, #88]	; (8002cf0 <TIM_OC1_SetConfig+0xf0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d003      	beq.n	8002ca2 <TIM_OC1_SetConfig+0xa2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a15      	ldr	r2, [pc, #84]	; (8002cf4 <TIM_OC1_SetConfig+0xf4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d111      	bne.n	8002cc6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	621a      	str	r2, [r3, #32]
}
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40014000 	.word	0x40014000
 8002cf4:	40014400 	.word	0x40014400

08002cf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f023 0210 	bic.w	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f023 0320 	bic.w	r3, r3, #32
 8002d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a22      	ldr	r2, [pc, #136]	; (8002de0 <TIM_OC2_SetConfig+0xe8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d10d      	bne.n	8002d78 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <TIM_OC2_SetConfig+0xe8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d007      	beq.n	8002d90 <TIM_OC2_SetConfig+0x98>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <TIM_OC2_SetConfig+0xec>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d003      	beq.n	8002d90 <TIM_OC2_SetConfig+0x98>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <TIM_OC2_SetConfig+0xf0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d113      	bne.n	8002db8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	621a      	str	r2, [r3, #32]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40014000 	.word	0x40014000
 8002de8:	40014400 	.word	0x40014400

08002dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0303 	bic.w	r3, r3, #3
 8002e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	021b      	lsls	r3, r3, #8
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <TIM_OC3_SetConfig+0xe4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d10d      	bne.n	8002e6a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a18      	ldr	r2, [pc, #96]	; (8002ed0 <TIM_OC3_SetConfig+0xe4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <TIM_OC3_SetConfig+0x96>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <TIM_OC3_SetConfig+0xe8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d003      	beq.n	8002e82 <TIM_OC3_SetConfig+0x96>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <TIM_OC3_SetConfig+0xec>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d113      	bne.n	8002eaa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	621a      	str	r2, [r3, #32]
}
 8002ec4:	bf00      	nop
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40012c00 	.word	0x40012c00
 8002ed4:	40014000 	.word	0x40014000
 8002ed8:	40014400 	.word	0x40014400

08002edc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	031b      	lsls	r3, r3, #12
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <TIM_OC4_SetConfig+0xb0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d007      	beq.n	8002f50 <TIM_OC4_SetConfig+0x74>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <TIM_OC4_SetConfig+0xb4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d003      	beq.n	8002f50 <TIM_OC4_SetConfig+0x74>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <TIM_OC4_SetConfig+0xb8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d109      	bne.n	8002f64 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	019b      	lsls	r3, r3, #6
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	621a      	str	r2, [r3, #32]
}
 8002f7e:	bf00      	nop
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40012c00 	.word	0x40012c00
 8002f90:	40014000 	.word	0x40014000
 8002f94:	40014400 	.word	0x40014400

08002f98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002fdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	041b      	lsls	r3, r3, #16
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a13      	ldr	r2, [pc, #76]	; (800303c <TIM_OC5_SetConfig+0xa4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d007      	beq.n	8003002 <TIM_OC5_SetConfig+0x6a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a12      	ldr	r2, [pc, #72]	; (8003040 <TIM_OC5_SetConfig+0xa8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d003      	beq.n	8003002 <TIM_OC5_SetConfig+0x6a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a11      	ldr	r2, [pc, #68]	; (8003044 <TIM_OC5_SetConfig+0xac>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d109      	bne.n	8003016 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003008:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	621a      	str	r2, [r3, #32]
}
 8003030:	bf00      	nop
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40014000 	.word	0x40014000
 8003044:	40014400 	.word	0x40014400

08003048 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800307a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	021b      	lsls	r3, r3, #8
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800308e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	051b      	lsls	r3, r3, #20
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <TIM_OC6_SetConfig+0xa8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d007      	beq.n	80030b4 <TIM_OC6_SetConfig+0x6c>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <TIM_OC6_SetConfig+0xac>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d003      	beq.n	80030b4 <TIM_OC6_SetConfig+0x6c>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a12      	ldr	r2, [pc, #72]	; (80030f8 <TIM_OC6_SetConfig+0xb0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d109      	bne.n	80030c8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	029b      	lsls	r3, r3, #10
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	621a      	str	r2, [r3, #32]
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40014000 	.word	0x40014000
 80030f8:	40014400 	.word	0x40014400

080030fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	2201      	movs	r2, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1a      	ldr	r2, [r3, #32]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	43db      	mvns	r3, r3
 800311e:	401a      	ands	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a1a      	ldr	r2, [r3, #32]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	621a      	str	r2, [r3, #32]
}
 800313a:	bf00      	nop
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800315c:	2302      	movs	r3, #2
 800315e:	e04f      	b.n	8003200 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a21      	ldr	r2, [pc, #132]	; (800320c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d108      	bne.n	800319c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003190:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a14      	ldr	r2, [pc, #80]	; (800320c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c8:	d004      	beq.n	80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a10      	ldr	r2, [pc, #64]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d10c      	bne.n	80031ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	40012c00 	.word	0x40012c00
 8003210:	40014000 	.word	0x40014000

08003214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e040      	b.n	80032e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fd fb1a 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2224      	movs	r2, #36	; 0x24
 800327c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f82c 	bl	80032ec <UART_SetConfig>
 8003294:	4603      	mov	r3, r0
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e022      	b.n	80032e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fa4c 	bl	8003744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fad3 	bl	8003888 <UART_CheckIdleState>
 80032e2:	4603      	mov	r3, r0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f0:	b08a      	sub	sp, #40	; 0x28
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	431a      	orrs	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	431a      	orrs	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4313      	orrs	r3, r2
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4bb4      	ldr	r3, [pc, #720]	; (80035ec <UART_SetConfig+0x300>)
 800331c:	4013      	ands	r3, r2
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003324:	430b      	orrs	r3, r1
 8003326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4aa9      	ldr	r2, [pc, #676]	; (80035f0 <UART_SetConfig+0x304>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003354:	4313      	orrs	r3, r2
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003368:	430a      	orrs	r2, r1
 800336a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4aa0      	ldr	r2, [pc, #640]	; (80035f4 <UART_SetConfig+0x308>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d126      	bne.n	80033c4 <UART_SetConfig+0xd8>
 8003376:	4ba0      	ldr	r3, [pc, #640]	; (80035f8 <UART_SetConfig+0x30c>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b03      	cmp	r3, #3
 8003382:	d81b      	bhi.n	80033bc <UART_SetConfig+0xd0>
 8003384:	a201      	add	r2, pc, #4	; (adr r2, 800338c <UART_SetConfig+0xa0>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080033ad 	.word	0x080033ad
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033b5 	.word	0x080033b5
 800339c:	2301      	movs	r3, #1
 800339e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a2:	e080      	b.n	80034a6 <UART_SetConfig+0x1ba>
 80033a4:	2302      	movs	r3, #2
 80033a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033aa:	e07c      	b.n	80034a6 <UART_SetConfig+0x1ba>
 80033ac:	2304      	movs	r3, #4
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b2:	e078      	b.n	80034a6 <UART_SetConfig+0x1ba>
 80033b4:	2308      	movs	r3, #8
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ba:	e074      	b.n	80034a6 <UART_SetConfig+0x1ba>
 80033bc:	2310      	movs	r3, #16
 80033be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c2:	e070      	b.n	80034a6 <UART_SetConfig+0x1ba>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a8c      	ldr	r2, [pc, #560]	; (80035fc <UART_SetConfig+0x310>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d138      	bne.n	8003440 <UART_SetConfig+0x154>
 80033ce:	4b8a      	ldr	r3, [pc, #552]	; (80035f8 <UART_SetConfig+0x30c>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b0c      	cmp	r3, #12
 80033da:	d82d      	bhi.n	8003438 <UART_SetConfig+0x14c>
 80033dc:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <UART_SetConfig+0xf8>)
 80033de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e2:	bf00      	nop
 80033e4:	08003419 	.word	0x08003419
 80033e8:	08003439 	.word	0x08003439
 80033ec:	08003439 	.word	0x08003439
 80033f0:	08003439 	.word	0x08003439
 80033f4:	08003429 	.word	0x08003429
 80033f8:	08003439 	.word	0x08003439
 80033fc:	08003439 	.word	0x08003439
 8003400:	08003439 	.word	0x08003439
 8003404:	08003421 	.word	0x08003421
 8003408:	08003439 	.word	0x08003439
 800340c:	08003439 	.word	0x08003439
 8003410:	08003439 	.word	0x08003439
 8003414:	08003431 	.word	0x08003431
 8003418:	2300      	movs	r3, #0
 800341a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341e:	e042      	b.n	80034a6 <UART_SetConfig+0x1ba>
 8003420:	2302      	movs	r3, #2
 8003422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003426:	e03e      	b.n	80034a6 <UART_SetConfig+0x1ba>
 8003428:	2304      	movs	r3, #4
 800342a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800342e:	e03a      	b.n	80034a6 <UART_SetConfig+0x1ba>
 8003430:	2308      	movs	r3, #8
 8003432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003436:	e036      	b.n	80034a6 <UART_SetConfig+0x1ba>
 8003438:	2310      	movs	r3, #16
 800343a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800343e:	e032      	b.n	80034a6 <UART_SetConfig+0x1ba>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a6a      	ldr	r2, [pc, #424]	; (80035f0 <UART_SetConfig+0x304>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d12a      	bne.n	80034a0 <UART_SetConfig+0x1b4>
 800344a:	4b6b      	ldr	r3, [pc, #428]	; (80035f8 <UART_SetConfig+0x30c>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003454:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003458:	d01a      	beq.n	8003490 <UART_SetConfig+0x1a4>
 800345a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800345e:	d81b      	bhi.n	8003498 <UART_SetConfig+0x1ac>
 8003460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003464:	d00c      	beq.n	8003480 <UART_SetConfig+0x194>
 8003466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800346a:	d815      	bhi.n	8003498 <UART_SetConfig+0x1ac>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <UART_SetConfig+0x18c>
 8003470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003474:	d008      	beq.n	8003488 <UART_SetConfig+0x19c>
 8003476:	e00f      	b.n	8003498 <UART_SetConfig+0x1ac>
 8003478:	2300      	movs	r3, #0
 800347a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347e:	e012      	b.n	80034a6 <UART_SetConfig+0x1ba>
 8003480:	2302      	movs	r3, #2
 8003482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003486:	e00e      	b.n	80034a6 <UART_SetConfig+0x1ba>
 8003488:	2304      	movs	r3, #4
 800348a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348e:	e00a      	b.n	80034a6 <UART_SetConfig+0x1ba>
 8003490:	2308      	movs	r3, #8
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003496:	e006      	b.n	80034a6 <UART_SetConfig+0x1ba>
 8003498:	2310      	movs	r3, #16
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800349e:	e002      	b.n	80034a6 <UART_SetConfig+0x1ba>
 80034a0:	2310      	movs	r3, #16
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a51      	ldr	r2, [pc, #324]	; (80035f0 <UART_SetConfig+0x304>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d17a      	bne.n	80035a6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d824      	bhi.n	8003502 <UART_SetConfig+0x216>
 80034b8:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <UART_SetConfig+0x1d4>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034e5 	.word	0x080034e5
 80034c4:	08003503 	.word	0x08003503
 80034c8:	080034ed 	.word	0x080034ed
 80034cc:	08003503 	.word	0x08003503
 80034d0:	080034f3 	.word	0x080034f3
 80034d4:	08003503 	.word	0x08003503
 80034d8:	08003503 	.word	0x08003503
 80034dc:	08003503 	.word	0x08003503
 80034e0:	080034fb 	.word	0x080034fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034e4:	f7fe fc08 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 80034e8:	61f8      	str	r0, [r7, #28]
        break;
 80034ea:	e010      	b.n	800350e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034ec:	4b44      	ldr	r3, [pc, #272]	; (8003600 <UART_SetConfig+0x314>)
 80034ee:	61fb      	str	r3, [r7, #28]
        break;
 80034f0:	e00d      	b.n	800350e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034f2:	f7fe fb69 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 80034f6:	61f8      	str	r0, [r7, #28]
        break;
 80034f8:	e009      	b.n	800350e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fe:	61fb      	str	r3, [r7, #28]
        break;
 8003500:	e005      	b.n	800350e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800350c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8107 	beq.w	8003724 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	4413      	add	r3, r2
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	429a      	cmp	r2, r3
 8003524:	d305      	bcc.n	8003532 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	429a      	cmp	r2, r3
 8003530:	d903      	bls.n	800353a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003538:	e0f4      	b.n	8003724 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	2200      	movs	r2, #0
 800353e:	461c      	mov	r4, r3
 8003540:	4615      	mov	r5, r2
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	022b      	lsls	r3, r5, #8
 800354c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003550:	0222      	lsls	r2, r4, #8
 8003552:	68f9      	ldr	r1, [r7, #12]
 8003554:	6849      	ldr	r1, [r1, #4]
 8003556:	0849      	lsrs	r1, r1, #1
 8003558:	2000      	movs	r0, #0
 800355a:	4688      	mov	r8, r1
 800355c:	4681      	mov	r9, r0
 800355e:	eb12 0a08 	adds.w	sl, r2, r8
 8003562:	eb43 0b09 	adc.w	fp, r3, r9
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003574:	4650      	mov	r0, sl
 8003576:	4659      	mov	r1, fp
 8003578:	f7fc fe28 	bl	80001cc <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4613      	mov	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800358a:	d308      	bcc.n	800359e <UART_SetConfig+0x2b2>
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003592:	d204      	bcs.n	800359e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	60da      	str	r2, [r3, #12]
 800359c:	e0c2      	b.n	8003724 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035a4:	e0be      	b.n	8003724 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ae:	d16a      	bne.n	8003686 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80035b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d834      	bhi.n	8003622 <UART_SetConfig+0x336>
 80035b8:	a201      	add	r2, pc, #4	; (adr r2, 80035c0 <UART_SetConfig+0x2d4>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	080035e5 	.word	0x080035e5
 80035c4:	08003605 	.word	0x08003605
 80035c8:	0800360d 	.word	0x0800360d
 80035cc:	08003623 	.word	0x08003623
 80035d0:	08003613 	.word	0x08003613
 80035d4:	08003623 	.word	0x08003623
 80035d8:	08003623 	.word	0x08003623
 80035dc:	08003623 	.word	0x08003623
 80035e0:	0800361b 	.word	0x0800361b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e4:	f7fe fb88 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 80035e8:	61f8      	str	r0, [r7, #28]
        break;
 80035ea:	e020      	b.n	800362e <UART_SetConfig+0x342>
 80035ec:	efff69f3 	.word	0xefff69f3
 80035f0:	40008000 	.word	0x40008000
 80035f4:	40013800 	.word	0x40013800
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40004400 	.word	0x40004400
 8003600:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003604:	f7fe fb8e 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 8003608:	61f8      	str	r0, [r7, #28]
        break;
 800360a:	e010      	b.n	800362e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800360c:	4b4c      	ldr	r3, [pc, #304]	; (8003740 <UART_SetConfig+0x454>)
 800360e:	61fb      	str	r3, [r7, #28]
        break;
 8003610:	e00d      	b.n	800362e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003612:	f7fe fad9 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8003616:	61f8      	str	r0, [r7, #28]
        break;
 8003618:	e009      	b.n	800362e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800361a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361e:	61fb      	str	r3, [r7, #28]
        break;
 8003620:	e005      	b.n	800362e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800362c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d077      	beq.n	8003724 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	005a      	lsls	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	441a      	add	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b0f      	cmp	r3, #15
 800364e:	d916      	bls.n	800367e <UART_SetConfig+0x392>
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003656:	d212      	bcs.n	800367e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	b29b      	uxth	r3, r3
 800365c:	f023 030f 	bic.w	r3, r3, #15
 8003660:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	085b      	lsrs	r3, r3, #1
 8003666:	b29b      	uxth	r3, r3
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	b29a      	uxth	r2, r3
 800366e:	8afb      	ldrh	r3, [r7, #22]
 8003670:	4313      	orrs	r3, r2
 8003672:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	8afa      	ldrh	r2, [r7, #22]
 800367a:	60da      	str	r2, [r3, #12]
 800367c:	e052      	b.n	8003724 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003684:	e04e      	b.n	8003724 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003686:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800368a:	2b08      	cmp	r3, #8
 800368c:	d827      	bhi.n	80036de <UART_SetConfig+0x3f2>
 800368e:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <UART_SetConfig+0x3a8>)
 8003690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003694:	080036b9 	.word	0x080036b9
 8003698:	080036c1 	.word	0x080036c1
 800369c:	080036c9 	.word	0x080036c9
 80036a0:	080036df 	.word	0x080036df
 80036a4:	080036cf 	.word	0x080036cf
 80036a8:	080036df 	.word	0x080036df
 80036ac:	080036df 	.word	0x080036df
 80036b0:	080036df 	.word	0x080036df
 80036b4:	080036d7 	.word	0x080036d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036b8:	f7fe fb1e 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 80036bc:	61f8      	str	r0, [r7, #28]
        break;
 80036be:	e014      	b.n	80036ea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036c0:	f7fe fb30 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 80036c4:	61f8      	str	r0, [r7, #28]
        break;
 80036c6:	e010      	b.n	80036ea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c8:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <UART_SetConfig+0x454>)
 80036ca:	61fb      	str	r3, [r7, #28]
        break;
 80036cc:	e00d      	b.n	80036ea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ce:	f7fe fa7b 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 80036d2:	61f8      	str	r0, [r7, #28]
        break;
 80036d4:	e009      	b.n	80036ea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036da:	61fb      	str	r3, [r7, #28]
        break;
 80036dc:	e005      	b.n	80036ea <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80036e8:	bf00      	nop
    }

    if (pclk != 0U)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d019      	beq.n	8003724 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	085a      	lsrs	r2, r3, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	441a      	add	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b0f      	cmp	r3, #15
 8003708:	d909      	bls.n	800371e <UART_SetConfig+0x432>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003710:	d205      	bcs.n	800371e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60da      	str	r2, [r3, #12]
 800371c:	e002      	b.n	8003724 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003730:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003734:	4618      	mov	r0, r3
 8003736:	3728      	adds	r7, #40	; 0x28
 8003738:	46bd      	mov	sp, r7
 800373a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800373e:	bf00      	nop
 8003740:	00f42400 	.word	0x00f42400

08003744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01a      	beq.n	800385a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003842:	d10a      	bne.n	800385a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	605a      	str	r2, [r3, #4]
  }
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af02      	add	r7, sp, #8
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003898:	f7fd f94a 	bl	8000b30 <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d10e      	bne.n	80038ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f82d 	bl	800391a <UART_WaitOnFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e023      	b.n	8003912 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d10e      	bne.n	80038f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f817 	bl	800391a <UART_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e00d      	b.n	8003912 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b09c      	sub	sp, #112	; 0x70
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	4613      	mov	r3, r2
 8003928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800392a:	e0a5      	b.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003932:	f000 80a1 	beq.w	8003a78 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fd f8fb 	bl	8000b30 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <UART_WaitOnFlagUntilTimeout+0x32>
 8003946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003948:	2b00      	cmp	r3, #0
 800394a:	d13e      	bne.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800395a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003960:	667b      	str	r3, [r7, #100]	; 0x64
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800396a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800396c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003970:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e6      	bne.n	800394c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3308      	adds	r3, #8
 8003984:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	f023 0301 	bic.w	r3, r3, #1
 8003994:	663b      	str	r3, [r7, #96]	; 0x60
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3308      	adds	r3, #8
 800399c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800399e:	64ba      	str	r2, [r7, #72]	; 0x48
 80039a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e5      	bne.n	800397e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e067      	b.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d04f      	beq.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e6:	d147      	bne.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039f0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
 8003a12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a18:	e841 2300 	strex	r3, r2, [r1]
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e6      	bne.n	80039f2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	613b      	str	r3, [r7, #16]
   return(result);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f023 0301 	bic.w	r3, r3, #1
 8003a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3308      	adds	r3, #8
 8003a42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a44:	623a      	str	r2, [r7, #32]
 8003a46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	69f9      	ldr	r1, [r7, #28]
 8003a4a:	6a3a      	ldr	r2, [r7, #32]
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e5      	bne.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e010      	b.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69da      	ldr	r2, [r3, #28]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	4013      	ands	r3, r2
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	f43f af4a 	beq.w	800392c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3770      	adds	r7, #112	; 0x70
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <__libc_init_array>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	4d0d      	ldr	r5, [pc, #52]	; (8003adc <__libc_init_array+0x38>)
 8003aa8:	4c0d      	ldr	r4, [pc, #52]	; (8003ae0 <__libc_init_array+0x3c>)
 8003aaa:	1b64      	subs	r4, r4, r5
 8003aac:	10a4      	asrs	r4, r4, #2
 8003aae:	2600      	movs	r6, #0
 8003ab0:	42a6      	cmp	r6, r4
 8003ab2:	d109      	bne.n	8003ac8 <__libc_init_array+0x24>
 8003ab4:	4d0b      	ldr	r5, [pc, #44]	; (8003ae4 <__libc_init_array+0x40>)
 8003ab6:	4c0c      	ldr	r4, [pc, #48]	; (8003ae8 <__libc_init_array+0x44>)
 8003ab8:	f000 f820 	bl	8003afc <_init>
 8003abc:	1b64      	subs	r4, r4, r5
 8003abe:	10a4      	asrs	r4, r4, #2
 8003ac0:	2600      	movs	r6, #0
 8003ac2:	42a6      	cmp	r6, r4
 8003ac4:	d105      	bne.n	8003ad2 <__libc_init_array+0x2e>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003acc:	4798      	blx	r3
 8003ace:	3601      	adds	r6, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__libc_init_array+0xc>
 8003ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad6:	4798      	blx	r3
 8003ad8:	3601      	adds	r6, #1
 8003ada:	e7f2      	b.n	8003ac2 <__libc_init_array+0x1e>
 8003adc:	08003b64 	.word	0x08003b64
 8003ae0:	08003b64 	.word	0x08003b64
 8003ae4:	08003b64 	.word	0x08003b64
 8003ae8:	08003b68 	.word	0x08003b68

08003aec <memset>:
 8003aec:	4402      	add	r2, r0
 8003aee:	4603      	mov	r3, r0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memset+0xa>
 8003af4:	4770      	bx	lr
 8003af6:	f803 1b01 	strb.w	r1, [r3], #1
 8003afa:	e7f9      	b.n	8003af0 <memset+0x4>

08003afc <_init>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	bf00      	nop
 8003b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b02:	bc08      	pop	{r3}
 8003b04:	469e      	mov	lr, r3
 8003b06:	4770      	bx	lr

08003b08 <_fini>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr
